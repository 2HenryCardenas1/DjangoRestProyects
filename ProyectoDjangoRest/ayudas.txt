# Crear el entorno virtual
python -m venv nombreEntornoVirtual
# Activar el ambiente virtual
venv/bin/activate.bat

# Instalamos librerias
pip install django djangorestframework djangorestframework-simplejwt django-model-utils

#Creamos un proyecto de Django

django-admin.py startproject ‘nombre del proyecto’

#Creamos la aplicacion de Django

python manage.py startapp nameApp

# Editamos setting.py agregando 'rest_framework' y el nombre de la aplicacion en INSTALLED_APPS

INSTALLED_APPS = [
    ...,
    'nameApp',
    'rest_framework',
]

#creamos un super usuario para la aplicacion 

python manage.py createsuperuser


#HACIENDO UN OVERRIDE A LA TABLA USUARIO (HACERLO SIEMPRE AL INICIO DEL PROYECTO)

#Crear una nueva aplicacion para el manejo de usuarios

python manage.py startapp 'nombreAplicacion'

#Implementar la aplicacon en settings.py
INSTALLED_APPS = [
    ...,
    'nameApp',
]

#Creamos una clase vacia e importamos AbstractUser en nuestro models.py de nuestra aplicacion nueva

from django.contrib.auth.models import AbstractUser

class User(AbstractUser):
    pass


#Hacemos una migracion a la base de datos

1)pyhton manage.py makemigrations
2)python manage.py migrate


#JWT

#Instalar djangorestframework-simplejwt

pip install djangorestframework-simplejwt

#Editar settings.py

REST_FRAMEWORK = {

    'DEFAULT_AUTHENTICATION_CLASSES': (

        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )

}

#Conexion con postgres

#Editar seting.py y instalar psycopg2
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'USER': '',
        'NAME': '',
        'PASSWORD': '',
        'HOST': ''

    }
}

#Creacion de documentacion de la API

#Instalar
pip install -U drf-yasg

#En settings.py

INSTALLED_APPS = [
   ...
   'django.contrib.staticfiles',
   'drf_yasg',
   ...
]

#En mi aplicacion principal archivo urls.py
schema_view = get_schema_view(
   openapi.Info(
      title="Snippets API",
      default_version='v1',
      description="Test description",
      terms_of_service="https://www.google.com/policies/terms/",
      contact=openapi.Contact(email="contact@snippets.local"),
      license=openapi.License(name="BSD License"),
   ),
   public=True,

)

# Rutas para la documentacion de la api
    path('docs/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc')


    python.exe -m pip install --upgrade pip

#Configuracion del tiempo de vida de un token, se va al archivo settings.py
1) importar datetime ; import datetime
# Aca se edita la hora de expiracion del TOKEN
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=7)
}

#Despliegue del proyecto

#Generar los requerimientos

pip freeze > requeriments.txt

#Crear fichero runtime.txt

## Esto es para despligue en un servidor

1) se crea un fichero Procfile sin extencion y le indicamos los siguiente
    release: python manage.py migrate
    web:   blog.wsgi

2) se instala la libreria de gunicorn

    pip install gunicorn
    pip freeze > requeriments.txt

# Configuracion carpeta static en heroku,#Configuramos settings.py

STATIC_ROOT = os.phat.join(BASE_DIR, 'staticfiles')
STATIC_TMP = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'

os.makedirs(STATIC_TMP, exist_ok=True)
os.makedirs(STATIC_ROOT, exist_ok=True)

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static')
)

#instalar
pip install whitenoise

#Configuramos settings.py

#En middleware agregamos este :
    'whitenoise.middleware.WhiteNoiseMiddleware'
#Agregtamos esta variable
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


##URLS.py
from django.conf import settings
from django.conf.urls.static import static

##En el archivo de rutas principales agregamos despues del urlpatterns[]
    + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

##Generamos los staticos

    python manage.py collectstatic